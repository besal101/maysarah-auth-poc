// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SELLER
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  vendorApproved        Boolean                @default(false)

  Vendor Vendor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Country {
  id   String @id @unique() @default(uuid())
  name String
  flag String

  Vendor Vendor[]
}

model Vendor {
  id                      String    @id @unique() @default(uuid())
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String    @unique()
  commission              Int?
  company_name            String    @unique()
  company_mobile_number   String
  company_landline_number String?
  company_country_id      String
  companyCountry          Country   @relation(fields: [company_country_id], references: [id], onDelete: Cascade)
  company_address1        String
  company_address2        String?
  company_description     String
  contact_person_name     String?
  designation             String?
  account_name            String?
  bank_name               String?
  account_number          String?
  company_logo            String?
  company_cover_image     String?
  company_trade_licence   String?
  vendor_passport         String?
  vendor_id               String?
  company_bill            String?
  created_date            DateTime? @default(now())
  modified_date           DateTime?
  approval_flag           Boolean   @default(false)
  approved_by_id          String?
  approved_date           DateTime?
  step_completed          Int?
}
